package org.experimental.guava;

import java.util.List;
import java.util.Set;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.ListMultimap;
import com.google.common.collect.Multiset;
import org.junit.Assert;
import org.junit.Test;

public class MultimapTesting {

    @Test
    public void testMultimaps() {
        ListMultimap<String, String> map = ArrayListMultimap.create();

        map.put("A", "avocado");
        map.put("A", "apple");
        map.put("B", "banana");

        // By reusing the same key, you can put multiple items in an autogenerated list and retrieve the list later
        List<String> letterAFruits = map.get("A");
        System.out.println("letterAFruits = " + letterAFruits);

        // Keys with a single value are still retrieved as a list
        List<String> letterBFruits = map.get("B");
        System.out.println("letterBFruits = " + letterBFruits);

        // Note that non-existent keys return an empty list
        List<String> nonExistentFruits = map.get("C");
        System.out.println("nonExistentFruits = " + nonExistentFruits);

        // You can add directly to the underlying list and have the change be persisted to the map
        letterBFruits.add("blueberries");

        // Or simply write indirectly using the existing key
        map.put("B", "blackberries");
        letterBFruits = map.get("B");
        System.out.println("letterBFruits = " + letterBFruits);

        // If you want to confirm that the map never had a particular key set, you have to call map.asMap()
        Assert.assertFalse(map.asMap().containsKey("D"));

        // Keys look a bit different when using map.keys(). You get a key for each value in each key's list.
        // In the example below, you get 2 "A" keys that correspond to the values "apple" and "avocado".
        System.out.println("Printing map.keys()");
        Multiset<String> multiKeys = map.keys();
        multiKeys.forEach(key -> System.out.println(key));

        // Using map.keySet() produces distinct keys as one might expect.
        // In the example below, you get a single "A" key.
        System.out.println("Printing map.keySet()");
        Set<String> keys = map.keySet();
        keys.forEach(key -> System.out.println(key));

    }
}
